plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.devQuest'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j:9.3.0'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:5.11.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:3.0.1'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}
tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

bootRun {
    sourceResources sourceSets.main
}

spotless {
    java {
        target 'src/**/*.java'
        custom 'DevQuest Java Style', { content ->
            content
                // 클래스 선언 후 바로 시작
                .replaceAll(/(@\w+.*\n)+\s*\n+public\s+(class|interface|enum)/, { match ->
                    match[0].replaceAll(/\n\s*\n+public/, '\npublic')
                })

                // 어노테이션 정렬
                .replaceAll(/(@RestController\n)(@RequestMapping.*\n)(@RequiredArgsConstructor\n)/, '$1$3$2')

                // 메서드 사이 빈줄 정리 (한 줄만)
                .replaceAll(/(\}\s*)\n{2,}(\s*@\w+.*\n\s*public)/, '$1\n\n$2')
                .replaceAll(/(\}\s*)\n{2,}(\s*public)/, '$1\n\n$2')

                // 필드 선언 후 바로 시작
                .replaceAll(/(private\s+final\s+\w+.*;\s*)\n{2,}/, '$1\n\n')

                // 연속된 빈줄 제거 (최대 1줄)
                .replaceAll(/\n\s*\n\s*\n/, '\n\n')
        }

        // Import 순서
        importOrder(
            'java',
            'javax',
            'jakarta',
            'org.springframework',
            'org',
            'com.devquest',
            'com',
            ''
        )

        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 후행 공백 제거
        trimTrailingWhitespace()
        // 파일 끝 개행 추가
        endWithNewline()
    }

    format 'misc', {
        target '**/*.md', '**/*.properties', '**/*.yml', '**/*.yaml'
        trimTrailingWhitespace()
        endWithNewline()
    }
}

